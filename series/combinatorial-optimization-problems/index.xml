<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Combinatorial Optimization Problems on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/series/combinatorial-optimization-problems/</link>
    <description>Recent content in Combinatorial Optimization Problems on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jun 2024 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/series/combinatorial-optimization-problems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Routing Models to MIP: Solving Capacitated Vehicle Routing Problem</title>
      <link>https://seehiong.github.io/2024/from-routing-models-to-mip-solving-capacitated-vehicle-routing-problem/</link>
      <pubDate>Sat, 01 Jun 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/from-routing-models-to-mip-solving-capacitated-vehicle-routing-problem/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;In this post, I will follow the &lt;a href=&#34;https://developers.google.com/optimization/routing/vrp&#34; target=&#34;_blank&#34;&gt;Vehicle Routing Problem&lt;/a&gt; (VRP) with a focus on the capacitated vehicle routing problem (CVRP) and utilizing an alternative Mixed Integer Programming (MIP) approach.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;routing-model&#34;&gt;Routing Model&lt;/h2&gt;&#xA;&lt;p&gt;The main section of the program creates the index manager and the routing model.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create Routing Index Manager&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RoutingIndexManager manager &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RoutingIndexManager(data.&lt;span style=&#34;color:#a6e22e&#34;&gt;distanceMatrix&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;, data.&lt;span style=&#34;color:#a6e22e&#34;&gt;vehicleNumber&lt;/span&gt;, data.&lt;span style=&#34;color:#a6e22e&#34;&gt;depot&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create Routing Model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RoutingModel routing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RoutingModel(manager);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Solving Facility Location Problem with OR-Tools and Micronaut</title>
      <link>https://seehiong.github.io/2024/solving-facility-location-problem-with-or-tools-and-micronaut/</link>
      <pubDate>Mon, 27 May 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/solving-facility-location-problem-with-or-tools-and-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;In this post, I&amp;rsquo;ll tackle the &lt;a href=&#34;https://en.wikipedia.org/wiki/Facility_location_problem&#34; target=&#34;_blank&#34;&gt;Facility Location Problem&lt;/a&gt;, which involves deciding the optimal placement of facilities to minimize costs. Unlike my previous post on using a &lt;a href=&#34;https://seehiong.github.io/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/&#34; target=&#34;_blank&#34;&gt;genetic algorithm for the TSP&lt;/a&gt;, I&amp;rsquo;ll utilize &lt;a href=&#34;https://developers.google.com/optimization/&#34; target=&#34;_blank&#34;&gt;OR-Tools&lt;/a&gt; to solve this problem.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;defining-the-solver&#34;&gt;Defining the solver&lt;/h2&gt;&#xA;&lt;p&gt;Referencing the &lt;a href=&#34;https://developers.google.com/optimization/mip/mip_example&#34; target=&#34;_blank&#34;&gt;MIP example&lt;/a&gt;,  I&amp;rsquo;ll solve the FLP using the MIP approach. Let&amp;rsquo;s place all solver codes in &lt;strong&gt;FLPService.java&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing TSP with Genetic Algorithms in Micronaut</title>
      <link>https://seehiong.github.io/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/</link>
      <pubDate>Thu, 23 May 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;Research suggests that the  &lt;a href=&#34;https://www.math.uwaterloo.ca/tsp/pla85900/index.html&#34; target=&#34;_blank&#34;&gt;Optimal 85,900-Point Tour&lt;/a&gt; is the largest solved instance of the Traveling Salesman Problem (TSP). For this post, I will attempt to solve the TSP problem involving 200 cities.&lt;/p&gt;&#xA;&lt;p&gt;Genetic algorithms simulate the process of natural selection, mimicking &amp;ldquo;survival of the fittest&amp;rdquo; to solve problems. These algorithms evolve over generations, with each generation comprising individuals better adapted to solving the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efficient TSP Solver API with Micronaut</title>
      <link>https://seehiong.github.io/2024/efficient-tsp-solver-api-with-micronaut/</link>
      <pubDate>Sat, 27 Apr 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/efficient-tsp-solver-api-with-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m embarking on a journey to solve the &lt;a href=&#34;https://en.wikipedia.org/wiki/Travelling_salesman_problem&#34; target=&#34;_blank&#34;&gt;Travelling Salesman Problem (TSP)&lt;/a&gt; utilizing &lt;a href=&#34;https://choco-solver.org/&#34; target=&#34;_blank&#34;&gt;Choco-solver&lt;/a&gt;, an effective Java library for constraint programming. Additionally, I&amp;rsquo;ll be converting this solution into an API using &lt;a href=&#34;https://micronaut.io/&#34; target=&#34;_blank&#34;&gt;Micronaut&lt;/a&gt;, a cutting-edge, JVM-based framework for building modular, testable microservices and serverless applications.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;setting-up-with-micronaut&#34;&gt;Setting up with Micronaut&lt;/h2&gt;&#xA;&lt;p&gt;Following the &lt;a href=&#34;https://guides.micronaut.io/latest/creating-your-first-micronaut-app-gradle-java.html&#34; target=&#34;_blank&#34;&gt;official Micronaut guide&lt;/a&gt;, I downloaded the source and proceeded with the setup.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
