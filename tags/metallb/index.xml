<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metallb on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/metallb/</link>
    <description>Recent content in Metallb on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Oct 2024 08:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/metallb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integrating MLflow and Kubeflow on Talos</title>
      <link>https://seehiong.github.io/posts/2024/10/integrating-mlflow-and-kubeflow-on-talos/</link>
      <pubDate>Sun, 20 Oct 2024 08:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/10/integrating-mlflow-and-kubeflow-on-talos/</guid>
      <description>This post details the installation of MLflow and Kubeflow on a Talos HomeLab cluster. It covers the setup process, including Talos configuration, local-path and NFS provisioning, and Metallb installation. Step-by-step instructions are provided for deploying Kubeflow, followed by the installation of MLflow for managing the machine learning lifecycle. Finally, the post illustrates how to log experiments and models in MLflow and perform inference, demonstrating a seamless integration of these tools for enhanced machine learning operations.</description>
    </item>
    <item>
      <title>Deploy Microservices with Talos Locally</title>
      <link>https://seehiong.github.io/posts/2024/10/deploy-microservices-with-talos-locally/</link>
      <pubDate>Sun, 13 Oct 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/10/deploy-microservices-with-talos-locally/</guid>
      <description>In this guide, we walk through deploying the Google Cloud Microservices Demo locally using Talos Linux in a VirtualBox VM. This step-by-step tutorial replicates a GKE environment, enabling seamless integration of microservices in a local Kubernetes cluster. We cover Talos installation, setting up the microservices demo, integrating MetalLB for load balancing, and optional Istio service mesh and Kiali observability for advanced monitoring. This approach is perfect for developers looking to simulate cloud environments locally and ensure their microservices run smoothly before deploying to production.</description>
    </item>
    <item>
      <title>Setting Up and Using KServe with Kubeflow</title>
      <link>https://seehiong.github.io/posts/2024/06/setting-up-and-using-kserve-with-kubeflow/</link>
      <pubDate>Sun, 30 Jun 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/06/setting-up-and-using-kserve-with-kubeflow/</guid>
      <description>In this post, we explore KServe, a model inference platform on Kubernetes designed for scalability. Building on our previous Kubeflow guide, we detail how to set up your first KServe endpoint, make predictions, and troubleshoot common issues. Follow our step-by-step instructions to seamlessly integrate KServe with your Kubeflow environment and enhance your machine learning deployment process.</description>
    </item>
    <item>
      <title>Streamlining API Management with Kong</title>
      <link>https://seehiong.github.io/posts/2023/12/streamlining-api-management-with-kong/</link>
      <pubDate>Sun, 31 Dec 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/12/streamlining-api-management-with-kong/</guid>
      <description>This comprehensive guide walks you through integrating Kong, a powerful unified API platform, into your home lab environment. Starting with Docker installation and a custom Kong image, it covers PostgreSQL deployment, MetalLB setup for load balancing, and Kong service and route configuration. The post concludes with troubleshooting tips and instructions for deploying your customized Kong image in a K3s cluster. This step-by-step tutorial empowers you to efficiently manage APIs in your home lab using Kong.</description>
    </item>
    <item>
      <title>Helm for K8s Cluster</title>
      <link>https://seehiong.github.io/posts/2020/07/helm-for-k8s-cluster/</link>
      <pubDate>Fri, 24 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/07/helm-for-k8s-cluster/</guid>
      <description>I&amp;rsquo;ve successfully set up Helm as the package manager for my Raspberry Pi Kubernetes Cluster, enabling easy discovery, sharing, and use of Kubernetes software. After installing Helm, I set up the NGINX Ingress Controller using Helm for external access. Additionally, I configured MetalLB as a layer 2 load balancer to manage external IP addresses. Revisiting my Gitea setup, I updated the service configuration to leverage MetalLB, enhancing the overall scalability and efficiency of my Kubernetes environment on Raspberry Pi. Helm proves to be a valuable tool for managing Kubernetes packages effortlessly.</description>
    </item>
  </channel>
</rss>
