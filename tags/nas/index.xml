<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NAS on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/nas/</link>
    <description>Recent content in NAS on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jan 2024 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/nas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integrating NFS for Improved Scalability</title>
      <link>https://seehiong.github.io/posts/2024/01/integrating-nfs-for-improved-scalability/</link>
      <pubDate>Sun, 07 Jan 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/01/integrating-nfs-for-improved-scalability/</guid>
      <description>In this post, we explored the integration of NFS to enhance scalability in deploying LLM models within a home lab. Setting up NFS involved connecting to a TerraMaster NAS, and the K3s cluster was configured to dynamically provision storage. With NFS in place, the deployment process became more efficient, eliminating the need to rebuild images for each new model introduction. The post detailed the setup steps, from configuring NFS and K3s to deploying LLM models dynamically. This approach simplifies the scaling of Language Models, providing a centralized and scalable storage solution through NFS in a Kubernetes environment.</description>
    </item>
    <item>
      <title>NAS Server</title>
      <link>https://seehiong.github.io/posts/2020/06/nas-server/</link>
      <pubDate>Fri, 05 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/nas-server/</guid>
      <description>Repurposing my Raspberry Pi 3B into a NAS server using OpenMediaVault (OMV) was a 90-minute project. I opted for Raspberry Pi OS Lite, ensuring its integrity with MD5 &amp;amp; SHA checksums. Win32DiskImager facilitated OS installation on a 16GB SD card. After powering up, I updated the OS, configured settings, and initiated OMV installation using commands provided by developers. Post-installation, I accessed OMV through the Pi&amp;rsquo;s IP address, configured settings, added a user, mounted an external HDD, created a shared folder, and enabled SMB/CIFS service. Following these steps, I successfully owned a personal OMV on Raspberry Pi!</description>
    </item>
  </channel>
</rss>
