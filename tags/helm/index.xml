<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Helm on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/helm/</link>
    <description>Recent content in Helm on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Aug 2024 10:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/helm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up Kafka with MicroK8s and Multipass</title>
      <link>https://seehiong.github.io/2024/setting-up-kafka-with-microk8s-and-multipass/</link>
      <pubDate>Sat, 03 Aug 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/setting-up-kafka-with-microk8s-and-multipass/</guid>
      <description>My homelab is a playground for experimenting with various tools and setups. However, for Proof of Concept (POC) environments, a lightweight and portable setup is often more suitable. In this post, I will guide you through setting up a MicroK8s environment in a virtual machine using Multipass. This POC demonstrates how Kafka can be set up in this environment.</description>
    </item>
    <item>
      <title>Deploying Budibase in HomeLab</title>
      <link>https://seehiong.github.io/2024/deploying-budibase-in-homelab/</link>
      <pubDate>Sun, 25 Feb 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/deploying-budibase-in-homelab/</guid>
      <description>This post outlines the process of installing Budibase in a HomeLab environment, starting with testing it on Docker Desktop and then deploying it using Helm in Kubernetes. It guides through setting up an admin user, building the first app by creating a database, designing an application form, and configuring submission actions. The summary encapsulates the steps involved in testing, deploying, and building an application with Budibase, highlighting key actions such as Docker Compose setup, Helm installation, app creation, and deployment in a concise manner.</description>
    </item>
    <item>
      <title>Exploring Kong Ingress Controller (KIC)</title>
      <link>https://seehiong.github.io/2024/exploring-kong-ingress-controller-kic/</link>
      <pubDate>Mon, 01 Jan 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/exploring-kong-ingress-controller-kic/</guid>
      <description>Embark on a journey into the new year by exploring Kong Ingress Controller (KIC) in your home lab. This guide, transitioning from a previous discussion on Kong Gateway, details the seamless setup of KIC using Helm and K3s. From initial preparations to installing Kong Ingress Controller and Gateway, witness the efficient management of APIs in your home lab environment. Learn to add Kong Ingresses, ensuring optimal routing for various paths. Through concise steps and illustrative visuals, this post simplifies the process, allowing you to experience KIC&amp;rsquo;s capabilities firsthand. Dive into the year with a hands-on exploration of API management with Kong in your home lab. Happy New Year!</description>
    </item>
    <item>
      <title>Pi Cluster with Longhorn</title>
      <link>https://seehiong.github.io/archives/2021/raspberry-pi-cluster-with-longhorn/</link>
      <pubDate>Sun, 06 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/raspberry-pi-cluster-with-longhorn/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/longhorn/highly-available-kubernetes-pi-cluster.png&#34; alt=&#34;highly-available-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By running Raspberry PI Cluster with Longhorn, you will have a simplified, easy to deploy cloud-native persistent block storage&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;raspberry-pi-cluster-and-longhorn&#34;&gt;Raspberry Pi Cluster and Longhorn&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 30 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this section, I will install &lt;a href=&#34;https://longhorn.io/&#34; target=&#34;_blank&#34;&gt;Longhorn&lt;/a&gt;, a highly available persistance storage for Kubernetes. This guide assumes that you have a working Raspberry PI Cluster. If you do not have, please  follow &lt;a href=&#34;https://seehiong.github.io/archives/2021/kubernetes-pi-cluster-with-ansible/&#34; target=&#34;_blank&#34;&gt;Kubernetes Cluster with Ansible&lt;/a&gt; or &lt;a href=&#34;https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;HA Kubernetes Pi Cluster (Part I)&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm for K8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/helm-for-kubernetes-cluster/</link>
      <pubDate>Fri, 24 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/helm-for-kubernetes-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/helm/helm-on-kubernetes-cluster.png&#34; alt=&#34;helm-for-kubernetes-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Helm as the package manager for Kubernetes Cluster on Raspberry, you can find, share and and use software built for Kubernetes&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;helm-on-kubernetes-cluster&#34;&gt;Helm on Kubernetes Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 10 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34;&gt;Helm&lt;/a&gt; is the package manager for Kubernetes. In this guide, I will install helm and setup ingress nginx controller with metallb as the layer 2 load balancer.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-helm&#34;&gt;Installing Helm&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(3 mins)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
