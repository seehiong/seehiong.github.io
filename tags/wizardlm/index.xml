<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WizardLM on See Hiong&#39;s Blog</title>
    <link>http://localhost:1313/tags/wizardlm/</link>
    <description>Recent content in WizardLM on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Nov 2023 20:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/wizardlm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boosting Inference Speed: SSD and GPU Acceleration</title>
      <link>http://localhost:1313/archives/2023/boosting-inference-speed-ssd-and-gpu-acceleration/</link>
      <pubDate>Thu, 30 Nov 2023 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/archives/2023/boosting-inference-speed-ssd-and-gpu-acceleration/</guid>
      <description>&lt;p&gt;In the relentless pursuit of optimal disk space and lightning-fast inference speeds, I embarked on an exciting upgrade journey by integrating the formidable &lt;a href=&#34;https://www.lexar.com/product/lexar-nm790-m-2-2280-pcie-gen-4x4-nvme-ssd/&#34; target=&#34;_blank&#34;&gt;Lexar NM790 M.2 2280 PCIe SSD&lt;/a&gt;. This blog post unfolds in two parts: the first chronicles the meticulous migration of my Windows 11 to this powerhouse SSD, while the second unveils the secrets behind the enhanced inferencing speed for the &lt;a href=&#34;http://localhost:1313/archives/2023/rag-over-java-code-with-langchain4j/&#34; target=&#34;_blank&#34;&gt;Langchain4j application&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;part-1-seamless-os-migration-with-clonezilla&#34;&gt;Part 1: Seamless OS Migration with Clonezilla&lt;/h2&gt;&#xA;&lt;p&gt;Amidst a sea of software promising seamless disk cloning, I found solace in the reliability of &lt;a href=&#34;https://clonezilla.org/&#34; target=&#34;_blank&#34;&gt;Clonezilla&lt;/a&gt;, a robust open-source tool for disk imaging and cloning.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RAG over Java code with Langchain4j</title>
      <link>http://localhost:1313/archives/2023/rag-over-java-code-with-langchain4j/</link>
      <pubDate>Sat, 11 Nov 2023 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/archives/2023/rag-over-java-code-with-langchain4j/</guid>
      <description>&lt;p&gt;Expanding upon the concepts introduced in the &lt;a href=&#34;http://localhost:1313/archives/2023/building-an-ai-application-with-langchain4j/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt; and drawing inspiration from &lt;a href=&#34;https://python.langchain.com/docs/use_cases/question_answering/code_understanding&#34; target=&#34;_blank&#34;&gt;RAG over code&lt;/a&gt;, this article dives into the integration of a Retrieval-Augmented Generation (RAG) service. The goal is to empower users to query their Java codebase effectively.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;p&gt;To embark on this journey, I&amp;rsquo;ve opted for &lt;a href=&#34;https://javaparser.org/&#34; target=&#34;_blank&#34;&gt;Java Parser&lt;/a&gt; , a powerful tool for traversing Java source code. Let&amp;rsquo;s begin by incorporating the latest version of Java Parser into our build.gradle file:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
