<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BE on See Hiong&#39;s Blog</title>
    <link>http://localhost:1313/tags/be/</link>
    <description>Recent content in BE on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2024 20:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/be/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solving Facility Location Problem with OR-Tools and Micronaut</title>
      <link>http://localhost:1313/2024/solving-facility-location-problem-with-or-tools-and-micronaut/</link>
      <pubDate>Mon, 27 May 2024 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/2024/solving-facility-location-problem-with-or-tools-and-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;In this post, I&amp;rsquo;ll tackle the &lt;a href=&#34;https://en.wikipedia.org/wiki/Facility_location_problem&#34; target=&#34;_blank&#34;&gt;Facility Location Problem&lt;/a&gt;, which involves deciding the optimal placement of facilities to minimize costs. Unlike my previous post on using a &lt;a href=&#34;http://localhost:1313/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/&#34; target=&#34;_blank&#34;&gt;genetic algorithm for the TSP&lt;/a&gt;, I&amp;rsquo;ll utilize &lt;a href=&#34;https://developers.google.com/optimization/&#34; target=&#34;_blank&#34;&gt;OR-Tools&lt;/a&gt; to solve this problem.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;defining-the-solver&#34;&gt;Defining the solver&lt;/h2&gt;&#xA;&lt;p&gt;Referencing the &lt;a href=&#34;https://developers.google.com/optimization/mip/mip_example&#34; target=&#34;_blank&#34;&gt;MIP example&lt;/a&gt;,  I&amp;rsquo;ll solve the FLP using the MIP approach. Let&amp;rsquo;s place all solver codes in &lt;strong&gt;FLPService.java&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing TSP with Genetic Algorithms in Micronaut</title>
      <link>http://localhost:1313/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/</link>
      <pubDate>Thu, 23 May 2024 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/2024/optimizing-tsp-with-genetic-algorithms-in-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;Research suggests that the  &lt;a href=&#34;https://www.math.uwaterloo.ca/tsp/pla85900/index.html&#34; target=&#34;_blank&#34;&gt;Optimal 85,900-Point Tour&lt;/a&gt; is the largest solved instance of the Traveling Salesman Problem (TSP). For this post, I will attempt to solve the TSP problem involving 200 cities.&lt;/p&gt;&#xA;&lt;p&gt;Genetic algorithms simulate the process of natural selection, mimicking &amp;ldquo;survival of the fittest&amp;rdquo; to solve problems. These algorithms evolve over generations, with each generation comprising individuals better adapted to solving the problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efficient TSP Solver API with Micronaut</title>
      <link>http://localhost:1313/2024/efficient-tsp-solver-api-with-micronaut/</link>
      <pubDate>Sat, 27 Apr 2024 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/2024/efficient-tsp-solver-api-with-micronaut/</guid>
      <description>&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m embarking on a journey to solve the &lt;a href=&#34;https://en.wikipedia.org/wiki/Travelling_salesman_problem&#34; target=&#34;_blank&#34;&gt;Travelling Salesman Problem (TSP)&lt;/a&gt; utilizing &lt;a href=&#34;https://choco-solver.org/&#34; target=&#34;_blank&#34;&gt;Choco-solver&lt;/a&gt;, an effective Java library for constraint programming. Additionally, I&amp;rsquo;ll be converting this solution into an API using &lt;a href=&#34;https://micronaut.io/&#34; target=&#34;_blank&#34;&gt;Micronaut&lt;/a&gt;, a cutting-edge, JVM-based framework for building modular, testable microservices and serverless applications.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;setting-up-with-micronaut&#34;&gt;Setting up with Micronaut&lt;/h2&gt;&#xA;&lt;p&gt;Following the &lt;a href=&#34;https://guides.micronaut.io/latest/creating-your-first-micronaut-app-gradle-java.html&#34; target=&#34;_blank&#34;&gt;official Micronaut guide&lt;/a&gt;, I downloaded the source and proceeded with the setup.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RAG over Java code with Langchain4j</title>
      <link>http://localhost:1313/archives/2023/rag-over-java-code-with-langchain4j/</link>
      <pubDate>Sat, 11 Nov 2023 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/archives/2023/rag-over-java-code-with-langchain4j/</guid>
      <description>&lt;p&gt;Expanding upon the concepts introduced in the &lt;a href=&#34;http://localhost:1313/archives/2023/building-an-ai-application-with-langchain4j/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt; and drawing inspiration from &lt;a href=&#34;https://python.langchain.com/docs/use_cases/question_answering/code_understanding&#34; target=&#34;_blank&#34;&gt;RAG over code&lt;/a&gt;, this article dives into the integration of a Retrieval-Augmented Generation (RAG) service. The goal is to empower users to query their Java codebase effectively.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;p&gt;To embark on this journey, I&amp;rsquo;ve opted for &lt;a href=&#34;https://javaparser.org/&#34; target=&#34;_blank&#34;&gt;Java Parser&lt;/a&gt; , a powerful tool for traversing Java source code. Let&amp;rsquo;s begin by incorporating the latest version of Java Parser into our build.gradle file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building an AI Application with Langchain4j</title>
      <link>http://localhost:1313/archives/2023/building-an-ai-application-with-langchain4j/</link>
      <pubDate>Tue, 07 Nov 2023 20:00:00 +0800</pubDate>
      <guid>http://localhost:1313/archives/2023/building-an-ai-application-with-langchain4j/</guid>
      <description>&lt;p&gt;In this blog post, I&amp;rsquo;ll walk you through my journey of harnessing the capabilities of &lt;a href=&#34;https://github.com/langchain4j/langchain4j/&#34; target=&#34;_blank&#34;&gt;langchain4j&lt;/a&gt; to craft a powerful AI application using Java, specifically with a local language model. Unlike my previous exploration with Python, this post focuses on the Java implementation with Langchain4j.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;&#xA;&lt;p&gt;To kick things off, I&amp;rsquo;ve chosen &lt;a href=&#34;https://spring.io/tools&#34; target=&#34;_blank&#34;&gt;STS4&lt;/a&gt; as my Integrated Development Environment (IDE) and opted for &lt;a href=&#34;https://adoptium.net/temurin/archive/?version=17&#34; target=&#34;_blank&#34;&gt;Java 17&lt;/a&gt; as my programming language. Leveraging &lt;a href=&#34;https://www.postman.com/&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt; as my API platform and &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; as the framework of choice, let&amp;rsquo;s delve into the process.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
