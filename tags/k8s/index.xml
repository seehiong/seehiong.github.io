<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8s on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/k8s/</link>
    <description>Recent content in K8s on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Oct 2024 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy Microservices with Talos Locally</title>
      <link>https://seehiong.github.io/2024/deploy-microservices-with-talos-locally/</link>
      <pubDate>Sun, 13 Oct 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/deploy-microservices-with-talos-locally/</guid>
      <description>In this guide, we walk through deploying the Google Cloud Microservices Demo locally using Talos Linux in a VirtualBox VM. This step-by-step tutorial replicates a GKE environment, enabling seamless integration of microservices in a local Kubernetes cluster. We cover Talos installation, setting up the microservices demo, integrating MetalLB for load balancing, and optional Istio service mesh and Kiali observability for advanced monitoring. This approach is perfect for developers looking to simulate cloud environments locally and ensure their microservices run smoothly before deploying to production.</description>
    </item>
    <item>
      <title>Talos Linux: Setting Up a Secure, Immutable Kubernetes Cluster</title>
      <link>https://seehiong.github.io/2024/talos-linux-setting-up-a-secure-immutable-kubernetes-cluster/</link>
      <pubDate>Sun, 01 Sep 2024 08:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/talos-linux-setting-up-a-secure-immutable-kubernetes-cluster/</guid>
      <description>This post guides you through setting up a secure, immutable Kubernetes cluster using Talos Linux. It covers installing Talos on control and worker nodes, configuring local storage with hostPath and Local Path Provisioner, and setting up the Kubernetes Dashboard with an admin user for cluster management. With Talos Linux, you achieve a minimal, API-managed Kubernetes environment without SSH or systemd, making it ideal for a secure and reliable homelab or production setup.</description>
    </item>
    <item>
      <title>Scaling Kafka Workloads with KEDA in Kubernetes</title>
      <link>https://seehiong.github.io/2024/scaling-kafka-workloads-with-keda-in-kubernetes/</link>
      <pubDate>Sat, 10 Aug 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/scaling-kafka-workloads-with-keda-in-kubernetes/</guid>
      <description>This post demonstrates how to use KEDA, a Kubernetes-based Event Driven Autoscaler, to dynamically scale Kafka consumer workloads. Building on a previous setup with Kafka on MicroK8s, the guide walks through the installation of KEDA, configuring Kafka consumers, setting up secrets for authentication, and creating a ScaledObject to manage scaling based on message load. The post also includes practical examples of scaling under different loads, showcasing how KEDA automates horizontal scaling without requiring changes to the microservices code, making it easier to manage workloads in a Kubernetes environment.</description>
    </item>
    <item>
      <title>Building Your First Kubeflow Pipeline: A Step-by-Step Guide</title>
      <link>https://seehiong.github.io/2024/building-your-first-kubeflow-pipeline-a-step-by-step-guide/</link>
      <pubDate>Sat, 20 Jul 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/building-your-first-kubeflow-pipeline-a-step-by-step-guide/</guid>
      <description>In this blog post, I guide you through creating and running your first Kubeflow pipeline. We&amp;rsquo;ll start with the &amp;ldquo;Hello World&amp;rdquo; example, demonstrate how to manage sequential and shared pipelines, and explore artifact storage with MinIO. Additionally, I&amp;rsquo;ll introduce K9s, a powerful terminal-based UI for managing your Kubernetes clusters efficiently. By the end, you&amp;rsquo;ll have a solid understanding of setting up and managing Kubeflow pipelines in your machine learning workflows.</description>
    </item>
    <item>
      <title>Setting Up and Using KServe with Kubeflow</title>
      <link>https://seehiong.github.io/2024/setting-up-and-using-kserve-with-kubeflow/</link>
      <pubDate>Sun, 30 Jun 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/setting-up-and-using-kserve-with-kubeflow/</guid>
      <description>In this post, we explore KServe, a model inference platform on Kubernetes designed for scalability. Building on our previous Kubeflow guide, we detail how to set up your first KServe endpoint, make predictions, and troubleshoot common issues. Follow our step-by-step instructions to seamlessly integrate KServe with your Kubeflow environment and enhance your machine learning deployment process.</description>
    </item>
    <item>
      <title>Log Management with Graylog</title>
      <link>https://seehiong.github.io/2024/log-management-with-graylog/</link>
      <pubDate>Fri, 19 Apr 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/log-management-with-graylog/</guid>
      <description>Explore setting up Graylog in your HomeLab for comprehensive log management. Configure MongoDB and OpenSearch, deploy Fluent Bit for log forwarding, and implement advanced features like Grok patterns and pipelines. Troubleshoot efficiently with tools like netshoot and tcpdump. Enhance your HomeLab environment with a scalable and efficient log management solution.</description>
    </item>
    <item>
      <title>Configuring Appwrite Functions with K3s</title>
      <link>https://seehiong.github.io/2024/configuring-appwrite-functions-with-k3s/</link>
      <pubDate>Sun, 10 Mar 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/configuring-appwrite-functions-with-k3s/</guid>
      <description>This guide outlines configuring Appwrite Functions within a K3s environment. It covers essential steps, including installing ngrok for external network access, registering a GitHub App, and setting up Appwrite with required configurations. The process involves updating YAML files for deployment, ensuring proper routing with Traefik, and creating functions through the Appwrite interface. Once set up, the functions are deployed successfully, enabling seamless integration and execution within the K3s infrastructure.</description>
    </item>
    <item>
      <title>Deploying Budibase in HomeLab</title>
      <link>https://seehiong.github.io/2024/deploying-budibase-in-homelab/</link>
      <pubDate>Sun, 25 Feb 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/deploying-budibase-in-homelab/</guid>
      <description>This post outlines the process of installing Budibase in a HomeLab environment, starting with testing it on Docker Desktop and then deploying it using Helm in Kubernetes. It guides through setting up an admin user, building the first app by creating a database, designing an application form, and configuring submission actions. The summary encapsulates the steps involved in testing, deploying, and building an application with Budibase, highlighting key actions such as Docker Compose setup, Helm installation, app creation, and deployment in a concise manner.</description>
    </item>
    <item>
      <title>Deploying Appwrite in HomeLab with K3s</title>
      <link>https://seehiong.github.io/2024/deploying-appwrite-in-homelab-with-k3s/</link>
      <pubDate>Fri, 16 Feb 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/deploying-appwrite-in-homelab-with-k3s/</guid>
      <description>Learn how to seamlessly integrate Appwrite, an open-source platform, into your HomeLab setup using K3s. Follow step-by-step instructions to deploy K3s with Portainer, prepare Appwrite volumes, and configure miscellaneous services like MariaDB and InfluxDB. Utilize Kompose to convert Docker Compose files to Kubernetes for efficient deployment. Ensure smooth installation by mapping necessary environment variables and applying all required deployments and services. Finally, witness the successful deployment of Appwrite services and access the login page to start building scalable applications. Master the art of HomeLab application deployment with Appwrite and K3s.</description>
    </item>
    <item>
      <title>Java Integration with Jupyter Notebooks</title>
      <link>https://seehiong.github.io/2024/java-integration-with-jupyter-notebooks/</link>
      <pubDate>Sun, 21 Jan 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/java-integration-with-jupyter-notebooks/</guid>
      <description>Embark on a seamless integration of Java into Jupyter notebooks with this comprehensive guide. Beginning with the selection of a relevant Jupyter Docker Stack, the post details setup steps and deployment in HomeLab, showcasing application results for verification. The integration of Java Kernel through JBang and testing with &amp;ldquo;Hello World&amp;rdquo; and Apache Commons library exemplifies the versatility. Further exploration involves experimenting with Java in a Python kernel using JBang. Concluding with a call to joyful coding, this journey promises a harmonious blend of Java&amp;rsquo;s robustness and Jupyter&amp;rsquo;s interactive nature. Discover the joy of coding in this enriched Java-in-Jupyter experience. Happy coding!</description>
    </item>
    <item>
      <title>Integrating NFS for Improved Scalability</title>
      <link>https://seehiong.github.io/2024/integrating-nfs-for-improved-scalability/</link>
      <pubDate>Sun, 07 Jan 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/integrating-nfs-for-improved-scalability/</guid>
      <description>In this post, we explored the integration of NFS to enhance scalability in deploying LLM models within a home lab. Setting up NFS involved connecting to a TerraMaster NAS, and the K3s cluster was configured to dynamically provision storage. With NFS in place, the deployment process became more efficient, eliminating the need to rebuild images for each new model introduction. The post detailed the setup steps, from configuring NFS and K3s to deploying LLM models dynamically. This approach simplifies the scaling of Language Models, providing a centralized and scalable storage solution through NFS in a Kubernetes environment.</description>
    </item>
    <item>
      <title>Integration of Kong into AI Workflow</title>
      <link>https://seehiong.github.io/2024/integration-of-kong-into-ai-workflow/</link>
      <pubDate>Sat, 06 Jan 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/integration-of-kong-into-ai-workflow/</guid>
      <description>This comprehensive guide navigates through configuring Kong OSS and Kong Ingress Controller (KIC), seamlessly integrating Kong into an AI workflow. Starting with Kong OSS configuration, the tutorial covers updating environment variables and service ports. The Langchain4j application is then adapted to leverage Kong API, allowing for flexible path-based APIs. Additionally, potential timeout issues are addressed. The guide concludes with a demonstration of Kong Ingress Controller configuration, emphasizing optimal settings for specific use cases. Whether through Kong OSS or KIC, readers gain insights into enhancing API management and integration within their AI workflows.</description>
    </item>
    <item>
      <title>Exploring Kong Ingress Controller (KIC)</title>
      <link>https://seehiong.github.io/2024/exploring-kong-ingress-controller-kic/</link>
      <pubDate>Mon, 01 Jan 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2024/exploring-kong-ingress-controller-kic/</guid>
      <description>Embark on a journey into the new year by exploring Kong Ingress Controller (KIC) in your home lab. This guide, transitioning from a previous discussion on Kong Gateway, details the seamless setup of KIC using Helm and K3s. From initial preparations to installing Kong Ingress Controller and Gateway, witness the efficient management of APIs in your home lab environment. Learn to add Kong Ingresses, ensuring optimal routing for various paths. Through concise steps and illustrative visuals, this post simplifies the process, allowing you to experience KIC&amp;rsquo;s capabilities firsthand. Dive into the year with a hands-on exploration of API management with Kong in your home lab. Happy New Year!</description>
    </item>
    <item>
      <title>Streamlining API Management with Kong</title>
      <link>https://seehiong.github.io/archives/2023/streamlining-api-management-with-kong/</link>
      <pubDate>Sun, 31 Dec 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2023/streamlining-api-management-with-kong/</guid>
      <description>&lt;p&gt;In this comprehensive guide, we will walk through the process of integrating &lt;a href=&#34;https://konghq.com/&#34; target=&#34;_blank&#34;&gt;Kong&lt;/a&gt;, a robust unified API platform, into our home lab environment.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;prerequistes&#34;&gt;Prerequistes&lt;/h2&gt;&#xA;&lt;p&gt;To begin, I will start with a fresh Ubuntu server instance. We&amp;rsquo;ll start by installing Docker and configuring it for non-root usage:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install docker.io&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker pi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run Docker without sudo by logging back in or executing this&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su - pi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>AI Integration: LocalAI, Chroma, and Langchain4j</title>
      <link>https://seehiong.github.io/archives/2023/ai-integration-localai-chroma-langchain4j/</link>
      <pubDate>Fri, 29 Dec 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2023/ai-integration-localai-chroma-langchain4j/</guid>
      <description>&lt;p&gt;Referring to the &lt;a href=&#34;https://seehiong.github.io/archives/2023/building-an-ai-application-with-langchain4j/&#34; target=&#34;_blank&#34;&gt;Building an AI application with Langchaing4j&lt;/a&gt; guide, the deployment of necessary Docker images, LocalAI, and Chroma to our Home Lab is outlined.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;creating-custom-localai-image&#34;&gt;Creating custom LocalAI image&lt;/h2&gt;&#xA;&lt;p&gt;Begin with pulling the latest image using the &lt;a href=&#34;https://localai.io/howtos/easy-setup-docker/&#34; target=&#34;_blank&#34;&gt;easy docker setup&lt;/a&gt; guide:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull quay.io/go-skynet/local-ai:v2.2.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, run LocalAI from the &lt;em&gt;~/localai&lt;/em&gt; folder and download a model:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up K3s</title>
      <link>https://seehiong.github.io/archives/2023/setting-up-k3s/</link>
      <pubDate>Sun, 30 Jul 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2023/setting-up-k3s/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.k3s.io/&#34; target=&#34;_blank&#34;&gt;K3S&lt;/a&gt; is a lightweight and easy-to-install Kubernetes distribution, making it an ideal choice for running a Kubernetes cluster in your home lab. In this blog post, we will walk you through the step-by-step process of setting up K3s on an Ubuntu Server 22.04.2 LTS.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-setting-up-k3s&#34;&gt;1 Setting up K3S&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-installing-ubuntu-server-22042-lts&#34;&gt;1.1 Installing Ubuntu Server 22.04.2 LTS&lt;/h3&gt;&#xA;&lt;p&gt;To start, we&amp;rsquo;ll install &lt;a href=&#34;https://ubuntu.com/download/server&#34; target=&#34;_blank&#34;&gt;Ubuntu server 22.04.2 LTS&lt;/a&gt; on our laptop. You can verify the Linux distribution using the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD Pipeline on Pi Cluster (IV)</title>
      <link>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-4/</link>
      <pubDate>Sun, 18 Jul 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-4/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/pipeline4/raspberry-pi-enclosed-in-lego-structure.jpeg&#34; alt=&#34;raspberry-pi-enclosed-in-lego-structure&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part 4), with SonarQube integrating into Jenkins and Gitlab&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;building-a-cicd-pipeline-on-a-raspberry-pi-cluster-part-iv&#34;&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part IV)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In continuation from &lt;a href=&#34;https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-3/&#34; target=&#34;_blank&#34;&gt;part 3&lt;/a&gt; of this guide, I will add &lt;a href=&#34;https://www.sonarqube.org/&#34; target=&#34;_blank&#34;&gt;SonarQube&lt;/a&gt; into my CI/CD pipeline. This will enahnce our workflow with continuous code quality and code security.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD Pipeline on Pi Cluster (III)</title>
      <link>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-3/</link>
      <pubDate>Sun, 04 Jul 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/pipeline3/raspberry-pi-enclosed-in-lego-structure.jpeg&#34; alt=&#34;raspberry-pi-enclosed-in-lego-structure&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part 3), with JFrog Container Registry supporting our Docker containers and Helm Chart repositories&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;building-a-cicd-pipeline-on-a-raspberry-pi-cluster-part-iii&#34;&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part III)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Continue from &lt;a href=&#34;https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-2/&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt; of this guide, I will add &lt;a href=&#34;https://jfrog.com/container-registry/&#34; target=&#34;_blank&#34;&gt;JFrog Container Registry&lt;/a&gt; to my CI/CD pipeline.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-container-registry&#34;&gt;Installing Container Registry&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(5 mins)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD Pipeline on Pi Cluster (II)</title>
      <link>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-2/</link>
      <pubDate>Mon, 21 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/pipeline2/raspberry-pi-enclosed-in-lego-structure.jpeg&#34; alt=&#34;raspberry-pi-enclosed-in-lego-structure&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Building a CI/CD pipeline part 2 on a Raspberry PI Cluster, with JFrog Artifactory as the repository manager&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;building-a-cicd-pipeline-on-a-raspberry-pi-cluster-part-ii&#34;&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part II)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 40 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Continuing from &lt;a href=&#34;https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;part I&lt;/a&gt; of this guide, I will add &lt;a href=&#34;https://jfrog.com/artifactory/&#34; target=&#34;_blank&#34;&gt;JFrog Artifactory&lt;/a&gt; to my CI/CD pipeline.&lt;/p&gt;&#xA;&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(1 min)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Referencing from my previous post on &lt;a href=&#34;https://seehiong.github.io/archives/2020/jenkins-maven-agent-for-kubernetes/&#34; target=&#34;_blank&#34;&gt;maven agent&lt;/a&gt;, let&amp;rsquo;s configure maven-agent to mount Longhorn volume. Navigate to &lt;em&gt;Manage Jenkins &amp;gt; Manage Nodes and Clouds &amp;gt; Configure Clouds&lt;/em&gt;. Expand on Pod Template details and add a volume:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD Pipeline on Pi Cluster (I)</title>
      <link>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-1/</link>
      <pubDate>Sun, 13 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/building-a-ci-cd-pipeline-on-a-raspberry-pi-cluster-part-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/pipeline1/raspberry-pi-enclosed-in-lego-structure.jpeg&#34; alt=&#34;raspberry-pi-enclosed-in-lego-structure&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Building a CI/CD pipeline on a Raspberry PI Cluster, with 3 master and 1 worker nodes, enclosed in a custom-made LEGO structure&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;building-a-cicd-pipeline-on-a-raspberry-pi-cluster-part-i&#34;&gt;Building a CI/CD pipeline on a Raspberry PI Cluster (Part I)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 40 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this series, I will build my own CI/CD pipeline, with tools that are configured to run on &lt;a href=&#34;https://seehiong.github.io/archives/2021/raspberry-pi-cluster-with-longhorn/&#34; target=&#34;_blank&#34;&gt;Raspberry PI Cluster and Longhorn&lt;/a&gt;, a HA Raspberry PI Cluster. By end of this guide, you will have a &lt;a href=&#34;https://gitea.io/en-us/&#34; target=&#34;_blank&#34;&gt;self-hosted Git service&lt;/a&gt;, working hand-in-hand with &lt;a href=&#34;https://www.jenkins.io/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pi Cluster with Longhorn</title>
      <link>https://seehiong.github.io/archives/2021/raspberry-pi-cluster-with-longhorn/</link>
      <pubDate>Sun, 06 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/raspberry-pi-cluster-with-longhorn/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/longhorn/highly-available-kubernetes-pi-cluster.png&#34; alt=&#34;highly-available-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By running Raspberry PI Cluster with Longhorn, you will have a simplified, easy to deploy cloud-native persistent block storage&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;raspberry-pi-cluster-and-longhorn&#34;&gt;Raspberry Pi Cluster and Longhorn&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 30 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this section, I will install &lt;a href=&#34;https://longhorn.io/&#34; target=&#34;_blank&#34;&gt;Longhorn&lt;/a&gt;, a highly available persistance storage for Kubernetes. This guide assumes that you have a working Raspberry PI Cluster. If you do not have, please  follow &lt;a href=&#34;https://seehiong.github.io/archives/2021/kubernetes-pi-cluster-with-ansible/&#34; target=&#34;_blank&#34;&gt;Kubernetes Cluster with Ansible&lt;/a&gt; or &lt;a href=&#34;https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;HA Kubernetes Pi Cluster (Part I)&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8s Pi Cluster with Ansible</title>
      <link>https://seehiong.github.io/archives/2021/kubernetes-pi-cluster-with-ansible/</link>
      <pubDate>Sat, 29 May 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2021/kubernetes-pi-cluster-with-ansible/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/ansible/highly-available-kubernetes-pi-cluster.png&#34; alt=&#34;highly-available-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By provisioning a Kubernetes PI Cluster with Ansible, you can easily spin off a Raspberry PI cluster&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;kubernetes-cluster-with-ansible&#34;&gt;Kubernetes Cluster with Ansible&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 50 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this guide, I will configure a Kubernetes Cluster using &lt;a href=&#34;https://www.ansible.com/&#34; target=&#34;_blank&#34;&gt;Ansible&lt;/a&gt;. This guide follows closely to the &lt;a href=&#34;https://github.com/raspbernetes/k8s-cluster-installation&#34; target=&#34;_blank&#34;&gt;Raspbernetes Cluster Installation&lt;/a&gt;. I will be using 3x Raspberry Pi 4 Model B 8GB as the master nodes and 1x Raspberry Pi 3 Model B as the only worker node.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HA K8s Pi Cluster (II)</title>
      <link>https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-2/</link>
      <pubDate>Mon, 17 Aug 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/ha-k8s2/highly-available-kubernetes-pi-cluster.png&#34; alt=&#34;highly-available-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By having a Highly Available Kubernetes Pi Cluster, you will have full control over your production grade environment on-premise&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ha-kubernetes-pi-cluster-part-ii&#34;&gt;HA Kubernetes Pi Cluster (Part II)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 20 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this follow up guide, I will configure the HA Kubernetes Cluster onto the previous &lt;a href=&#34;https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;external etcd setup&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-docker&#34;&gt;Installing Docker&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(5 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Firstly, installs docker &lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/container-runtimes/&#34; target=&#34;_blank&#34;&gt;container runtimes&lt;/a&gt; to all master nodes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>HA K8s Pi Cluster (I)</title>
      <link>https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-1/</link>
      <pubDate>Sun, 09 Aug 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/ha-k8s1/highly-available-kubernetes-pi-cluster.png&#34; alt=&#34;highly-available-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By having a Highly Available Kubernetes Pi Cluster, you will have full control over your production grade environment on-premise&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;ha-kubernetes-pi-cluster-part-i&#34;&gt;HA Kubernetes Pi Cluster (Part I)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 25 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;On this special day, I will like to wish all Singaporeans and Singapore a Happy 55th &lt;a href=&#34;https://www.ndp.gov.sg/&#34; target=&#34;_blank&#34;&gt;National Day&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;p&gt;With the newly purchase 2x Raspberry Pi Model B 8GB and 64GB SD card to my collection, I will setup a Highly Available Kubernetes Pi Cluster. In this guide, I will setup an &lt;a href=&#34;https://etcd.io/&#34; target=&#34;_blank&#34;&gt;external etcd&lt;/a&gt; key-value store. In the &lt;a href=&#34;https://seehiong.github.io/archives/2020/highly-available-kubernetes-pi-cluster-part-2/&#34; target=&#34;_blank&#34;&gt;next article&lt;/a&gt;, I will continue with the HA configuration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Private Registry for K8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/private-registry-for-kubernetes-cluster/</link>
      <pubDate>Fri, 07 Aug 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/private-registry-for-kubernetes-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/registry/raspberrypi4_modelb.png&#34; alt=&#34;raspberrypi4_modelb&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With your own Private Registry for Kubernetes Cluster, you can have full control over the docker registry and improve overall performance&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;private-registry-on-kubernetes-cluster&#34;&gt;Private Registry on Kubernetes Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 10 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/_/registry/&#34; target=&#34;_blank&#34;&gt;Docker Registry&lt;/a&gt; is the official implementation for storing and distributing Docker images.&lt;/p&gt;&#xA;&lt;h2 id=&#34;preparing-private-registry&#34;&gt;Preparing Private Registry&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(5mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, create the &lt;a href=&#34;https://docs.docker.com/registry/insecure/&#34; target=&#34;_blank&#34;&gt;self-signed certificate&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p certs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -x509 -days &lt;span style=&#34;color:#ae81ff&#34;&gt;365&lt;/span&gt; -out certs/domain.crt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Jenkins Maven Agent</title>
      <link>https://seehiong.github.io/archives/2020/jenkins-maven-agent-for-kubernetes/</link>
      <pubDate>Fri, 31 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/jenkins-maven-agent-for-kubernetes/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/jenkins-agent/jenkins-on-kubernetes.png&#34; alt=&#34;jenkins-maven-agent-on-kubernetes&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;By creating Jenkins Maven Agent for Kubernetes Cluster, you can improve build time of your maven builds&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jenkins-maven-agent-on-kubernetes&#34;&gt;Jenkins Maven Agent on Kubernetes&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Following up on the &lt;a href=&#34;https://seehiong.github.io/archives/2020/jenkins-pipeline-for-kubernetes-cluster/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt;, I will create a Jenkins Maven Agent for Kubernetes. By configuring a local maven m2 repository, you can save previous time on your builds.&lt;/p&gt;&#xA;&lt;h2 id=&#34;configuring-jenkins&#34;&gt;Configuring Jenkins&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(1 min)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins Pipeline for K8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/jenkins-pipeline-for-kubernetes-cluster/</link>
      <pubDate>Fri, 31 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/jenkins-pipeline-for-kubernetes-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/jenkins-pipeline/jenkins-on-kubernetes.png&#34; alt=&#34;jenkins-pipeline-for-kubernetes-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Jenkins Pipeline for Kubernetes Cluster, you can create a continuous integration environment for your project&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jenkins-pipeline-on-kubernetes-cluster&#34;&gt;Jenkins Pipeline on Kubernetes Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 10 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this guide, I will create my own &lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/jenkinsfile/&#34; target=&#34;_blank&#34;&gt;declarative Jenkins pipeline&lt;/a&gt;. With this, I can build, package and run my &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; Hello-World application.&lt;/p&gt;&#xA;&lt;h2 id=&#34;configuring-jenkins-and-gitea&#34;&gt;Configuring Jenkins and Gitea&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(1 min)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Helm for K8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/helm-for-kubernetes-cluster/</link>
      <pubDate>Fri, 24 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/helm-for-kubernetes-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/helm/helm-on-kubernetes-cluster.png&#34; alt=&#34;helm-for-kubernetes-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Helm as the package manager for Kubernetes Cluster on Raspberry, you can find, share and and use software built for Kubernetes&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;helm-on-kubernetes-cluster&#34;&gt;Helm on Kubernetes Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 10 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34;&gt;Helm&lt;/a&gt; is the package manager for Kubernetes. In this guide, I will install helm and setup ingress nginx controller with metallb as the layer 2 load balancer.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-helm&#34;&gt;Installing Helm&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(3 mins)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins for K8s Cluster (II)</title>
      <link>https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-2/</link>
      <pubDate>Sun, 19 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/jenkins-k8s2/jenkins-on-kubernetes.png&#34; alt=&#34;jenkins-on-kubernetes&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Jenkins Agent for Kubernetes Cluster, you can orchestrate your build, test and scale deployment pipelines automatically&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jenkins-on-kubernetes-cluster-part-ii&#34;&gt;Jenkins on Kubernetes Cluster (Part II)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 25 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this guide, I will setup Jenkins agents for &lt;a href=&#34;https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt;. With these agents, you can expand your Kubernetes cluster capabilities to handle additional loads.&lt;/p&gt;&#xA;&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, you need to create the jenkins agent docker image for raspberry Pi cluster. You may start by creating a new &lt;em&gt;Dockerfile&lt;/em&gt; and insert the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins for K8s Cluster (I)</title>
      <link>https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-1/</link>
      <pubDate>Sun, 12 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/jenkins-k8s1/jenkins-on-kubernetes.png&#34; alt=&#34;jenkins-on-kubernetes&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Jenkins for Kubernetes Cluster, you can orchestrate your build, test and deployment pipelines&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;jenkins-on-kubernetes-cluster-part-i&#34;&gt;Jenkins on Kubernetes Cluster (Part I)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 40 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt; is the leading open source automation server. It provides hundreds of plugins for supporting the building, deploying and automating of any project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(25 min)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In this guide, I am going to build the docker image for Jenkins on &lt;a href=&#34;https://seehiong.github.io/archives/2020/kubernetes-cluster-on-raspberry-pi/&#34; target=&#34;_blank&#34;&gt;Kubernetes Cluster on Pi&lt;/a&gt;. You may use the &lt;a href=&#34;https://hub.docker.com/r/balenalib/raspberrypi4-64-debian&#34; target=&#34;_blank&#34;&gt;base image&lt;/a&gt; from &lt;a href=&#34;https://www.balena.io/&#34; target=&#34;_blank&#34;&gt;Balena&lt;/a&gt; in any Docker environment. In addition, you can find more details about the Balena base images &lt;a href=&#34;https://www.balena.io/docs/reference/base-images/base-images&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gitea for K8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/gitea-on-kubernetes-pi-cluster/</link>
      <pubDate>Fri, 10 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/gitea-on-kubernetes-pi-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/gitea-k8s/gitea-on-raspberry-pi-cluster.png&#34; alt=&#34;gitea-on-kubernetes-pi-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Having Gitea on Kubernetes Pi cluster, you will have full control over your personal Git repositories&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;gitea-for-kubernetes-cluster-on-pi&#34;&gt;Gitea for Kubernetes Cluster on Pi&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 40 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Similar to the previous post on &lt;a href=&#34;https://seehiong.github.io/archives/2020/gitea-for-raspberry-pi-cluster/&#34; target=&#34;_blank&#34;&gt;Gitea for MicroK8s Cluster&lt;/a&gt;, I will be setting up Git in the newly created &lt;a href=&#34;https://seehiong.github.io/archives/2020/kubernetes-cluster-on-raspberry-pi/&#34; target=&#34;_blank&#34;&gt;Kubernetes Cluster&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setup-mysql&#34;&gt;Setup MySQL&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;First, I download the &lt;a href=&#34;https://dev.mysql.com/doc/mysql-installation-excerpt/8.0/en/docker-mysql-getting-started.html&#34; target=&#34;_blank&#34;&gt;mysql-server docker&lt;/a&gt; image:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes Cluster on Pi</title>
      <link>https://seehiong.github.io/archives/2020/kubernetes-cluster-on-raspberry-pi/</link>
      <pubDate>Sat, 04 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/kubernetes-cluster-on-raspberry-pi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/kubernetes/kubernetes-cluster-on-raspberry-pi.png&#34; alt=&#34;kubernetes-cluster-on-raspberry-pi&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Kubernetes Cluster on Raspberry Pi, you may orchestrate and manage your Docker containers with full control&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;kubernetes-cluster&#34;&gt;Kubernetes Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 70 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Similar to the previous &lt;a href=&#34;https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-1/&#34; target=&#34;_blank&#34;&gt;MicroK8s cluster&lt;/a&gt; setup, I am using &lt;a href=&#34;https://ubuntu.com/download/raspberry-pi&#34; target=&#34;_blank&#34;&gt;Ubuntu Server 20.04 LTS (64-bit)&lt;/a&gt; as my OS. Having a Kubernetes Cluster on Raspberry Pi, you will have more control over how the cluster configured.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker for MicroK8s Cluster</title>
      <link>https://seehiong.github.io/archives/2020/docker-on-raspberry-pi-cluster/</link>
      <pubDate>Sun, 21 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/docker-on-raspberry-pi-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/docker/docker-on-pi-cluster.png&#34; alt=&#34;docker-for-raspberry-pi&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;With Docker on Raspberry Pi cluster, you can run any containerized applications on your Pi Cluster&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;docker-on-raspberry&#34;&gt;Docker on Raspberry&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 15 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;To install &lt;a href=&#34;https://microk8s.io/docs/registry-images&#34; target=&#34;_blank&#34;&gt;Docker&lt;/a&gt; for Raspberry Pi Cluster, add &lt;strong&gt;ubuntu&lt;/strong&gt; user to the docker group:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install docker.io&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker ubuntu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su - ubuntu &lt;span style=&#34;color:#75715e&#34;&gt;# open a new shell with updated membership for the user&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>External Storage</title>
      <link>https://seehiong.github.io/archives/2020/external-storage-for-raspberry-pi-cluster/</link>
      <pubDate>Fri, 19 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/external-storage-for-raspberry-pi-cluster/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/storage/external-storage-for-pi.png&#34; alt=&#34;external-storage-for-pi&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Expand storage capacity by using external storage for your Raspberry Pi Cluster&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;external-storage-for-pi-cluster&#34;&gt;External Storage for Pi Cluster&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 35 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;With the &lt;a href=&#34;https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-1/&#34; target=&#34;_blank&#34;&gt;MicroK8s cluster&lt;/a&gt; in place, I decided to expand the External Storage for Raspberry Pi cluster. For this to work, I will use my external 640GB USB hard disk and configure MicroK8s default storage.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mounting-external-storage&#34;&gt;Mounting External Storage&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;(5 mins)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MicroK8s on Pi 4 8GB (II)</title>
      <link>https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-2/</link>
      <pubDate>Tue, 09 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/microk8s2/leaf_nodes.png&#34; alt=&#34;raspberry-pi-leaf-nodes-for-microk8s-cluster&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Adding few low-cost Raspberry Pi nodes to improve your MicroK8s performance&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;microk8s-cluster-on-raspberry-pi-4-model-b-8gb-part-ii&#34;&gt;MicroK8s Cluster on Raspberry Pi 4 Model B 8GB (Part II)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 45 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Following up from the &lt;a href=&#34;https://seehiong.github.io/archives/2020/jenkins-for-kubernetes-cluster-part-1/&#34; target=&#34;_blank&#34;&gt;previous post&lt;/a&gt;, for this second part, I will be adding new Raspberry Pi nodes to the MicroK8s Cluster. However, other than Raspberry Pi, you can also re-purpose some of your older unused laptop or PC and add them to your MicroK8s cluster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MicroK8s on Pi 4 8GB (I)</title>
      <link>https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-1/</link>
      <pubDate>Sat, 06 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2020/microk8s-cluster-on-raspberry-pi-8gb-part-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://seehiong.github.io/images/microk8s1/raspberrypi4_modelb.png&#34; alt=&#34;raspberry-pi-4-model-b&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Making your Raspberry Pi works for your MicroK8s cluster&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;microk8s-cluster-on-raspberry-pi-4-model-b-8gb-part-i&#34;&gt;MicroK8s Cluster on Raspberry Pi 4 Model B 8GB (Part I)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;(Total Setup Time: 40 mins)&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;I am very excited to receive my Raspberry Pi 4 today. Since I do not have the microHDMI cable, I decided to go for a headless install. With this new Pi 8GB, I plan to check out on the &lt;a href=&#34;https://microk8s.io/&#34; target=&#34;_blank&#34;&gt;MicroK8s&lt;/a&gt;, a lightweight upstream K8s. This tutorial shows my steps for setting up the MicroK8s Cluster on Raspberry Pi 4 Model B 8GB.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
