<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microsoft on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/microsoft/</link>
    <description>Recent content in Microsoft on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/microsoft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running LLaMA server in local machine</title>
      <link>https://seehiong.github.io/posts/2023/05/running-llama-server-in-local-machine/</link>
      <pubDate>Sat, 13 May 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/05/running-llama-server-in-local-machine/</guid>
      <description>In continuation from my previous post, I prepared the environment using Pipenv and installed the OpenAI-like web server with specific CMAKE arguments. Running the server with a provided model was straightforward. To create an SSH tunnel to the remote Ubuntu machine from my Windows PC, I used PuTTY, configuring it to forward port 8888. Connecting from BYO-GPT involved adjusting the server endpoint in the Dart file. This seamless integration allowed me to access the Open API for the LLAMA CPP server and successfully connect BYO-GPT to the specified server.</description>
    </item>
    <item>
      <title>Running LLaMA model locally</title>
      <link>https://seehiong.github.io/posts/2023/04/running-llama-model-locally/</link>
      <pubDate>Sun, 30 Apr 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/04/running-llama-model-locally/</guid>
      <description>In this thorough guide, I prepared my Ubuntu machine (32GB) for the LLaMA (Language Model) build. Following Georgi Gergano&amp;rsquo;s llama.cpp, I executed CMake commands, ensuring the correct tag and building the model successfully. I downloaded Microsoft&amp;rsquo;s Phi2 model in GGUF format, enabling local execution without exposing prompts or data. Running the Phi2 model showcased its capabilities in a few-shot interaction, providing accurate responses. Additionally, I explored optional OpenBLAS integration for improved speed, offering insights into the installation and rebuild process.</description>
    </item>
  </channel>
</rss>
