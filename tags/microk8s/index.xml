<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MicroK8s on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/microk8s/</link>
    <description>Recent content in MicroK8s on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Aug 2024 10:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/microk8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scaling Kafka Workloads with KEDA in Kubernetes</title>
      <link>https://seehiong.github.io/posts/2024/08/scaling-kafka-workloads-with-keda-in-kubernetes/</link>
      <pubDate>Sat, 10 Aug 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/08/scaling-kafka-workloads-with-keda-in-kubernetes/</guid>
      <description>This post demonstrates how to use KEDA, a Kubernetes-based Event Driven Autoscaler, to dynamically scale Kafka consumer workloads. Building on a previous setup with Kafka on MicroK8s, the guide walks through the installation of KEDA, configuring Kafka consumers, setting up secrets for authentication, and creating a ScaledObject to manage scaling based on message load. The post also includes practical examples of scaling under different loads, showcasing how KEDA automates horizontal scaling without requiring changes to the microservices code, making it easier to manage workloads in a Kubernetes environment.</description>
    </item>
    <item>
      <title>Setting Up Kafka with MicroK8s and Multipass</title>
      <link>https://seehiong.github.io/posts/2024/08/setting-up-kafka-with-microk8s-and-multipass/</link>
      <pubDate>Sat, 03 Aug 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/08/setting-up-kafka-with-microk8s-and-multipass/</guid>
      <description>My homelab is a playground for experimenting with various tools and setups. However, for Proof of Concept (POC) environments, a lightweight and portable setup is often more suitable. In this post, I will guide you through setting up a MicroK8s environment in a virtual machine using Multipass. This POC demonstrates how Kafka can be set up in this environment.</description>
    </item>
    <item>
      <title>Gitea for K8s Cluster</title>
      <link>https://seehiong.github.io/posts/2020/07/gitea-for-k8s-cluster/</link>
      <pubDate>Fri, 10 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/07/gitea-for-k8s-cluster/</guid>
      <description>In my recent endeavor, I spent 40 minutes setting up Gitea on my Kubernetes Pi cluster, granting me absolute control over personal Git repositories. I seamlessly integrated MySQL, using Docker images and Kubernetes configurations. The meticulous setup involved creating necessary paths on an external HDD, configuring persistent volumes, and ensuring a smooth deployment. I prepared MySQL for Gitea, creating a user, database, and granting privileges. Gitea installation via Docker and subsequent exposure to external access using NodePort were executed flawlessly. A troubleshooting tip addressed a MySQL access issue. Now, my Gitea on Kubernetes Pi Cluster is fully operational for efficient repository management.</description>
    </item>
    <item>
      <title>Gitea for MicroK8s Cluster</title>
      <link>https://seehiong.github.io/posts/2020/06/gitea-for-microk8s-cluster/</link>
      <pubDate>Mon, 29 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/gitea-for-microk8s-cluster/</guid>
      <description>I dedicated 45 minutes to set up Gitea on my Raspberry Pi cluster using MicroK8s. Gitea, a self-hosted Git service, grants my team cost savings and enhanced server control. I ensured a smooth installation by preparing MySQL, creating required paths on an external HDD, and configuring persistent volumes. Following MySQL setup, I seamlessly prepared the database and moved on to setting up Gitea with Docker, utilizing a docker-compose.yml file. After injecting images into MicroK8s cache, I exposed Gitea externally using NodePort. Troubleshooting tips were handy, addressing MySQL connection issues. My self-hosted Git service is now ready for efficient collaboration.</description>
    </item>
    <item>
      <title>Docker for MicroK8s Cluster</title>
      <link>https://seehiong.github.io/posts/2020/06/docker-for-microk8s-cluster/</link>
      <pubDate>Sun, 21 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/docker-for-microk8s-cluster/</guid>
      <description>Setting up Docker on my Raspberry Pi Cluster took just 15 minutes. After installing Docker, I added the ubuntu user to the Docker group. Configuring Docker included adjusting the daemon settings for external storage. Testing Docker with a hello-world container went smoothly. To use local images for MicroK8s, I exported and injected the image successfully. Troubleshooting involved resolving daemon start errors, addressing connection issues, and handling permission errors. Formatting the existing NTFS HDD to ext4 and adjusting boot-up settings resolved challenges, making Docker work seamlessly on my Raspberry Pi Cluster.</description>
    </item>
    <item>
      <title>External Storage</title>
      <link>https://seehiong.github.io/posts/2020/06/external-storage/</link>
      <pubDate>Fri, 19 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/external-storage/</guid>
      <description>Expanding my Raspberry Pi Cluster&amp;rsquo;s storage with an external 640GB USB hard disk took 35 minutes. After mounting the external storage and addressing troubleshooting issues, I configured MicroK8s default storage to utilize the added space. Despite encountering errors, a reset and careful configuration solved the problem. Adding leaf nodes for MicroK8s and troubleshooting service unavailability for the dashboard completed the setup. I also disabled and re-enabled addons, ensuring a smooth integration of external storage with my MicroK8s cluster. Accessing the Kubernetes dashboard and checking nodes confirmed a successful expansion.</description>
    </item>
    <item>
      <title>MicroK8s on Pi 4 8GB (II)</title>
      <link>https://seehiong.github.io/posts/2020/06/microk8s-on-pi-4-8gb-ii/</link>
      <pubDate>Tue, 09 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/microk8s-on-pi-4-8gb-ii/</guid>
      <description>In the second part of my MicroK8s adventure on Raspberry Pi 4 Model B 8GB, I spent 45 minutes adding low-cost Raspberry Pi nodes to enhance cluster performance. Utilizing two older Pi 3B devices with Ubuntu Server (64-bit), I updated the OS, installed MicroK8s, and adjusted configurations. The master node initiated new node creation with &amp;ldquo;sudo microk8s add-node,&amp;rdquo; copying the output to each node. Successful integration was confirmed with &amp;ldquo;microk8s kubectl get node.&amp;rdquo; Excited to explore Kubernetes possibilities and gradually shift CI/CD pipelines to this lightweight cluster. Stay tuned for more on its diverse use cases!</description>
    </item>
    <item>
      <title>MicroK8s on Pi 4 8GB (I)</title>
      <link>https://seehiong.github.io/posts/2020/06/microk8s-on-pi-4-8gb-i/</link>
      <pubDate>Sat, 06 Jun 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/06/microk8s-on-pi-4-8gb-i/</guid>
      <description>I recently spent 40 minutes setting up MicroK8s on my new Raspberry Pi 4 Model B 8GB. Opting for a headless install due to a lack of a microHDMI cable, I used Ubuntu Server (64-bit) for the 64-bit requirements of MicroK8s. After initial setup, including changing the hostname and enabling memory cgroup, I installed MicroK8s, ensuring compatibility by adding my user to the MicroK8s group. Verification and usage of MicroK8s followed, with additional steps for enabling services like the dashboard. Troubleshooting involved switching to a 64-bit OS and finding the Pi&amp;rsquo;s IP using nmap. Excited to explore MicroK8s on my Raspberry Pi!</description>
    </item>
  </channel>
</rss>
