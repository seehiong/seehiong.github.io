<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimizer on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/optimizer/</link>
    <description>Recent content in Optimizer on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Feb 2025 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/optimizer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chat-Driven Insights with Chart.js</title>
      <link>https://seehiong.github.io/2025/chat-driven-insights-with-chartjs/</link>
      <pubDate>Sun, 09 Feb 2025 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2025/chat-driven-insights-with-chartjs/</guid>
      <description>Enhance your Vue.js application by integrating chat capabilities with Chart.js and LLMs like OpenAI and Deepseek-R1. This post walks through adding a chat node to the Micronaut-Optimizer workflow, enabling dynamic interactions with optimization results. Learn how to configure environment variables, connect workflow nodes, and send Chart.js data to LLMs. See it in action with sample inputs and responses, and explore running Deepseek-R1 locally with Ollama.</description>
    </item>
    <item>
      <title>Building a Vue.js Frontend for Combinatorial Optimization Problems</title>
      <link>https://seehiong.github.io/2025/building-a-vuejs-frontend-for-combinatorial-optimization-problem/</link>
      <pubDate>Sun, 26 Jan 2025 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2025/building-a-vuejs-frontend-for-combinatorial-optimization-problem/</guid>
      <description>In this post, Iâ€™ll walk you through the development of a Vue.js frontend application designed to complement my previous work on a flexible optimizer framework built with Micronaut. This frontend provides a visual interface for designing, managing, and optimizing workflows, with a focus on solving combinatorial optimization problems like the Traveling Salesman Problem (TSP). The app features a drag-and-drop UI, enabling users to define optimization problems graphically without relying on tools like Postman. By connecting inputs, transformations, and outputs through Workflow Nodes, users can visualize and compare the performance of backend optimization algorithms across different datasets.</description>
    </item>
    <item>
      <title>Building a Flexible Optimizer Framework with Micronaut</title>
      <link>https://seehiong.github.io/archives/2024/building-a-flexible-optimizer-framework-with-micronaut/</link>
      <pubDate>Sun, 29 Dec 2024 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/archives/2024/building-a-flexible-optimizer-framework-with-micronaut/</guid>
      <description>This post outlines the design and implementation of the Micronaut Optimizer framework, which solves combinatorial optimization problems like TSP and FLP. It details the architecture, key components, and the use of Flux and PublishSubject for real-time updates. The post also highlights planned enhancements, including additional solver integration, performance optimizations, visualization improvements, and architecture extensions. The complete implementation is available on GitHub, and contributions are welcome.</description>
    </item>
  </channel>
</rss>
