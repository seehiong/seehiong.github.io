<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LangChain on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/langchain/</link>
    <description>Recent content in LangChain on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Nov 2024 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/langchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building an AI Knowledge Assistant</title>
      <link>https://seehiong.github.io/posts/2024/11/building-an-ai-knowledge-assistant/</link>
      <pubDate>Sun, 24 Nov 2024 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2024/11/building-an-ai-knowledge-assistant/</guid>
      <description>Learn how to build an AI-powered knowledge assistant using Python. This guide covers data ingestion from sources like PDFs, deploying a FastAPI-based API, and querying the assistant for detailed answers. Using advanced retrieval mechanisms, the assistant provides contextually relevant responses. You&amp;rsquo;ll also explore a working example with the CQRS design pattern. The complete project code is available on &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;a href=&#34;https://github.com/seehiong/ai-knowledge-assistant&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;GitHub&lt;/a&gt;&#xD;&#xA;.</description>
    </item>
    <item>
      <title>How to summarize YouTube Videos in Minutes (II)</title>
      <link>https://seehiong.github.io/posts/2023/06/how-to-summarize-youtube-videos-in-minutes-ii/</link>
      <pubDate>Fri, 16 Jun 2023 20:00:00 +2000</pubDate>
      <guid>https://seehiong.github.io/posts/2023/06/how-to-summarize-youtube-videos-in-minutes-ii/</guid>
      <description>In this comprehensive guide, I explore AI-powered techniques to extract and summarize YouTube videos using tools like Whisper.cpp, GPT4All, LLaMA.cpp, and OpenAI models. I detail the step-by-step process, from setting up the environment to transcribing audio and leveraging AI for summarization. Despite encountering issues with GPT4All&amp;rsquo;s accuracy, alternative approaches using LLaMA.cpp and OpenAI models provide versatile summarization options. The tutorial aims to empower researchers, content creators, and information enthusiasts to efficiently analyze and summarize YouTube content using cutting-edge AI technologies.</description>
    </item>
    <item>
      <title>How to summarize YouTube Videos in Minutes (I)</title>
      <link>https://seehiong.github.io/posts/2023/06/how-to-summarize-youtube-videos-in-minutes-i/</link>
      <pubDate>Sat, 10 Jun 2023 20:00:00 +2000</pubDate>
      <guid>https://seehiong.github.io/posts/2023/06/how-to-summarize-youtube-videos-in-minutes-i/</guid>
      <description>Hey folks! Today, I&amp;rsquo;m stoked to introduce you to the game-changer that is GPT4All for summarizing YouTube videos. Join me on this journey of transformation as we set up the magic using Python. We&amp;rsquo;ll load transcripts, chunk them for optimal processing, and then unleash the power of GPT4All for mind-blowing summarizations. Brace yourself for amazement as we witness the magic unfold! Additionally, we&amp;rsquo;ll explore an optional OpenAI approach for comparison. Stay tuned for more exciting updates in the next blog post on video content summarization without embedded transcripts! âœ¨ðŸš€</description>
    </item>
    <item>
      <title>Receipt OCR with LangChain, OpenAI and PyTesseract</title>
      <link>https://seehiong.github.io/posts/2023/06/receipt-ocr-with-langchain-openai-and-pytesseract/</link>
      <pubDate>Tue, 06 Jun 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/06/receipt-ocr-with-langchain-openai-and-pytesseract/</guid>
      <description>&lt;p&gt;Recently, I embarked on an exhilarating journey into the realm of receipt OCR using LangChain and OpenAI, inspired by the captivating course on &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;a href=&#34;https://learn.deeplearning.ai/langchain/lesson/1/introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;LangChain for LLM Application Development&lt;/a&gt;&#xD;&#xA;. This exploration allowed me to unlock the full potential of PyTesseract, an extraordinary Python tool that serves as my guiding light for optical character recognition (OCR). By harnessing the power of OpenCV and seamlessly integrating OpenAI into the workflow, I aimed to compile the most optimal OCR results and validate them using LangChain&amp;rsquo;s impressive llm-math tool. Join me on this exciting adventure as we unravel the intricacies of receipt OCR and discover the true potential of LangChain, OpenAI, and PyTesseract.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Autofill PDF with LangChain and LangFlow</title>
      <link>https://seehiong.github.io/posts/2023/05/autofill-pdf-with-langchain-and-langflow/</link>
      <pubDate>Fri, 26 May 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/05/autofill-pdf-with-langchain-and-langflow/</guid>
      <description>In this journey, I explore automating PDF autofill using LangChain and LangFlow. Leveraging LangFlow and OpenAI, I streamline the employment form completion process, demonstrating steps to install LangFlow and set up a PostgreSQL table. Despite encountering challenges in prototyping with LangFlow, the exploration progresses to auto-fill PDFs. After extracting form fields and LLaMA model setup, I employ LangChain to fetch PostgreSQL data. Concluding with Python manipulation to interpolate and update the PDF, the process achieves seamless auto-fill. Dive into the details, overcome challenges, and witness the power of LangChain and LangFlow in revolutionizing PDF automation.</description>
    </item>
    <item>
      <title>Running GPT4All for your PostgreSQL with LangChain</title>
      <link>https://seehiong.github.io/posts/2023/05/running-gpt4all-for-your-postgresql-with-langchain/</link>
      <pubDate>Sun, 21 May 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/05/running-gpt4all-for-your-postgresql-with-langchain/</guid>
      <description>In this exploration, I guide you through setting up GPT4All on a Windows PC and demonstrate its synergy with SQL Chain for PostgreSQL queries using LangChain. Utilizing Jupyter Notebook and prerequisites like PostgreSQL and GPT4All-J v1.3-groovy, I install dependencies and showcase LangChain and GPT4All model setup. Navigating an Open Source Shakespeare database, I provide an ER diagram for clarity. Querying GPT4All through LangChain, we delve into PostgreSQL queries and also compare responses with OpenAI. The comprehensive walkthrough empowers you to seamlessly integrate GPT4All into your PostgreSQL workflows for efficient and dynamic interactions.</description>
    </item>
    <item>
      <title>Building ChatBot for your PDF files with LangChain</title>
      <link>https://seehiong.github.io/posts/2023/05/building-chatbot-for-your-pdf-files-with-langchain/</link>
      <pubDate>Sun, 07 May 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/05/building-chatbot-for-your-pdf-files-with-langchain/</guid>
      <description>In this post, I extend the use case from my previous post to demonstrate building a ChatBot for PDF files using LangChain. In the preparation phase, I install Chroma, an open-source embedding database, and ingest a PDF file using PyPDFLoader. I then split the document into chunks and use Chroma&amp;rsquo;s default embeddings. Due to a potential issue, I provide an alternative embedding approach. Next, I load a local LLaMA model, prepare for question-answering, and run queries using RetrievalQAWithSourcesChain. I also touch on running with OpenBLAS for optimization. The guide empowers users to explore personalized question-answering over their PDF documents.</description>
    </item>
    <item>
      <title>Building a Basic Chain with LangChain</title>
      <link>https://seehiong.github.io/posts/2023/05/building-a-basic-chain-with-langchain/</link>
      <pubDate>Mon, 01 May 2023 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2023/05/building-a-basic-chain-with-langchain/</guid>
      <description>With the LangChain framework and a setup from a previous post, I delve into building a basic chain using Llama.cpp within LangChain. Following preparations, I install required packages and run interactive Python code to set up the LLM model. The process involves formatting a prompt template and creating a chain. I explore memory integration, adding a conversation buffer for context. The conversation with AI is initiated and continued through user inputs. Stay tuned for more explorations in upcoming posts!</description>
    </item>
  </channel>
</rss>
