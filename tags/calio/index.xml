<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Calio on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/calio/</link>
    <description>Recent content in Calio on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Jun 2021 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/calio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pi Cluster with Longhorn</title>
      <link>https://seehiong.github.io/posts/2021/06/pi-cluster-with-longhorn/</link>
      <pubDate>Sun, 06 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2021/06/pi-cluster-with-longhorn/</guid>
      <description>I documented my journey setting up a Raspberry Pi Cluster with Longhorn for simplified cloud-native persistent block storage. The process took 30 minutes and assumed a functional Raspberry Pi Cluster. I prepared the environment by installing Helm, Calico CLI, and optionally, Kubernetes Dashboard. Then, I detailed the installation of Longhorn with Helm, including verification steps. Accessing Longhorn involved port-forwarding to the frontend service. The result: a highly available persistent storage solution for my Raspberry Pi Cluster, as depicted in the Longhorn dashboard. I addressed troubleshooting issues related to Calico and Longhorn uninstallation, ensuring a smooth experience.</description>
    </item>
    <item>
      <title>HA K8s Pi Cluster (II)</title>
      <link>https://seehiong.github.io/posts/2020/08/ha-k8s-pi-cluster-ii/</link>
      <pubDate>Mon, 17 Aug 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/08/ha-k8s-pi-cluster-ii/</guid>
      <description>In my journey to establish a Highly Available Kubernetes Pi Cluster, I&amp;rsquo;ve successfully configured the cluster following an external etcd setup. The process involves installing Docker, setting up the Docker daemon, and installing kubeadm. Initializing Kubernetes Master Nodes, preparing certificates, and configuring Calico for networking are key steps. Troubleshooting tips include addressing refused connections and certificate expiration. To rejoin a faulty node, cordoning, draining, and generating new keys are essential. Now, I proudly own a fully operational Highly Available Kubernetes Pi Cluster.</description>
    </item>
    <item>
      <title>Kubernetes Cluster on Pi</title>
      <link>https://seehiong.github.io/posts/2020/07/kubernetes-cluster-on-pi/</link>
      <pubDate>Sat, 04 Jul 2020 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2020/07/kubernetes-cluster-on-pi/</guid>
      <description>I recently spent 70 minutes setting up a Kubernetes Cluster on Raspberry Pi using Ubuntu Server 20.04 LTS. After burning the OS image and configuring a headless setup, I updated the OS, changed the hostname, and enabled memory cgroup. The Docker installation involved setting up external storage and configuring Docker daemon. Installing kubeadm and creating the Kubernetes cluster took an additional 45 minutes. I verified the cluster status, installed networking addons (Calico), and added leaf nodes. Troubleshooting included resolving conntrack and socat issues. Overall, the Raspberry Pi Kubernetes Cluster provides full control over Docker container orchestration.</description>
    </item>
  </channel>
</rss>
