<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JFrog on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/jfrog/</link>
    <description>Recent content in JFrog on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Jul 2021 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/jfrog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CI/CD Pipeline on Pi Cluster (III)</title>
      <link>https://seehiong.github.io/posts/2021/07/ci/cd-pipeline-on-pi-cluster-iii/</link>
      <pubDate>Sun, 04 Jul 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2021/07/ci/cd-pipeline-on-pi-cluster-iii/</guid>
      <description>In the third part of my Raspberry Pi CI/CD pipeline series, I incorporated JFrog Container Registry. Following the previous guide, I installed the registry, configured Docker images, and set up Longhorn volumes. Configuring the JFrog Container Registry involved adding local repositories, setting permissions, and configuring HTTP settings. I demonstrated testing the registry with Docker login and pushing an image. For Kubernetes integration, I created registry secrets and updated deployment files. The result is a complete CI/CD pipeline on a Raspberry Pi Cluster with JFrog Container Registry supporting Docker images. Optional Jenkins configuration is provided for maven-agent support.</description>
    </item>
    <item>
      <title>CI/CD Pipeline on Pi Cluster (II)</title>
      <link>https://seehiong.github.io/posts/2021/06/ci/cd-pipeline-on-pi-cluster-ii/</link>
      <pubDate>Mon, 21 Jun 2021 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2021/06/ci/cd-pipeline-on-pi-cluster-ii/</guid>
      <description>In the second installment of my Raspberry Pi CI/CD pipeline series, I seamlessly integrated JFrog Artifactory. Following the groundwork laid in [Part I], I extended the pipeline by configuring Maven-agent for Longhorn volume mounting, building a Raspberry Pi-compatible Artifactory Docker image, and configuring Artifactory. I demonstrated the process of creating permissions, Maven settings, and deploying JAR files. The integration with Jenkins involved plugin installation, settings configuration, and Jenkinsfile creation for artifact deployment. The result is a robust CI/CD pipeline on a Raspberry Pi Cluster, efficiently deploying artifacts to Artifactory. Troubleshooting tips address Longhorn volume stability and Jenkins volume permission issues.</description>
    </item>
  </channel>
</rss>
