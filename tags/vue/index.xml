<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/vue/</link>
    <description>Recent content in Vue on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2025 10:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Vue.js Frontend for Combinatorial Optimization Problems</title>
      <link>https://seehiong.github.io/2025/building-a-vuejs-frontend-for-combinatorial-optimization-problem/</link>
      <pubDate>Sun, 26 Jan 2025 10:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/2025/building-a-vuejs-frontend-for-combinatorial-optimization-problem/</guid>
      <description>In this post, Iâ€™ll walk you through the development of a Vue.js frontend application designed to complement my previous work on a flexible optimizer framework built with Micronaut. This frontend provides a visual interface for designing, managing, and optimizing workflows, with a focus on solving combinatorial optimization problems like the Traveling Salesman Problem (TSP). The app features a drag-and-drop UI, enabling users to define optimization problems graphically without relying on tools like Postman. By connecting inputs, transformations, and outputs through Workflow Nodes, users can visualize and compare the performance of backend optimization algorithms across different datasets.</description>
    </item>
  </channel>
</rss>
