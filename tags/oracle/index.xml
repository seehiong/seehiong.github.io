<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle on See Hiong&#39;s Blog</title>
    <link>https://seehiong.github.io/tags/oracle/</link>
    <description>Recent content in Oracle on See Hiong&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Feb 2025 20:00:00 +0800</lastBuildDate>
    <atom:link href="https://seehiong.github.io/tags/oracle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JMC: Java Performance Profiling Simplified</title>
      <link>https://seehiong.github.io/posts/2025/02/jmc-java-performance-profiling-simplified/</link>
      <pubDate>Sun, 02 Feb 2025 20:00:00 +0800</pubDate>
      <guid>https://seehiong.github.io/posts/2025/02/jmc-java-performance-profiling-simplified/</guid>
      <description>JDK Mission Control (JMC) is a powerful tool for low-overhead Java application profiling and performance analysis. In this post, I explore JMC’s capabilities while optimizing inference performance for Micronaut-Llama3 with DeepSeek-R1. I walk through setup, profiling with Flight Recorder, and identifying bottlenecks using flame graphs. Key optimizations, such as refining ByteVector operations, significantly enhance performance. A comparison with VisualVM highlights JMC’s advantages, making it the go-to tool for in-depth Java profiling. If you&amp;rsquo;re looking to fine-tune your Java applications, JMC provides essential insights for optimization.</description>
    </item>
  </channel>
</rss>
